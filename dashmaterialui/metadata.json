{
  "src/lib/components/AppBar.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "AppBar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fixed'",
              "computed": false
            },
            {
              "value": "'absolute'",
              "computed": false
            },
            {
              "value": "'sticky'",
              "computed": false
            },
            {
              "value": "'static'",
              "computed": false
            },
            {
              "value": "'relative'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The positioning type. The behavior of the different options is described in the MDN web docs. Note: sticky is not universally supported and will fall back to static when unavailable.",
        "defaultValue": {
          "value": "'fixed'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Avatar.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Avatar",
    "methods": [],
    "props": {
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Used in combination with src or srcSet to provide an alt attribute for the rendered img element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Used to render icon or text elements inside the Avatar. src and alt props will not be used and no img will be rendered by default.\nThis can be an element, or just a string."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "imgProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the img element if the component is used to display an image."
      },
      "sizes": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The sizes attribute for the img element."
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The src attribute for the img element."
      },
      "srcSet": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The srcSet attribute for the img element."
      }
    }
  },
  "src/lib/components/Button.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the button."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableFocusRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the keyboard focus ripple will be disabled. disableRipple must also be true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the ripple effect will be disabled."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked. If defined, an a element will be used as the root node."
      },
      "mini": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, and variant is 'fab', will use mini floating action button styling.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The size of the button. small is equivalent to the dense button styling.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'text'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'contained'",
              "computed": false
            },
            {
              "value": "'fab'",
              "computed": false
            },
            {
              "value": "'extendedFab'",
              "computed": false
            },
            {
              "value": "'flat'",
              "computed": false
            },
            {
              "value": "'raised'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use. WARNING: flat and raised are deprecated. Instead use text and contained respectively. fab and extendedFab are deprecated. Instead use <Fab> and <Fab variant=\"extended\">",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Grid.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Grid",
    "methods": [],
    "props": {
      "alignContent": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'stretch'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'space-between'",
              "computed": false
            },
            {
              "value": "'space-around'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the align-content style property. It's applied for all screen sizes.",
        "defaultValue": {
          "value": "'stretch'",
          "computed": false
        }
      },
      "alignItems": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'stretch'",
              "computed": false
            },
            {
              "value": "'baseline'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the align-items style property. It's applied for all screen sizes.",
        "defaultValue": {
          "value": "'stretch'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "container": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the component will have the flex container behavior. You should be wrapping items with a container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "direction": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": "'row'"
        },
        "required": false,
        "description": "Defines the flex-direction style property. It is applied for all screen sizes.",
        "defaultValue": {
          "value": "'row'",
          "computed": false
        }
      },
      "item": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the component will have the flex item behavior. You should be wrapping items with a container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "justify": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'space-between'",
              "computed": false
            },
            {
              "value": "'space-around'",
              "computed": false
            },
            {
              "value": "'space-evenly'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the justify-content style property. It is applied for all screen sizes.",
        "defaultValue": {
          "value": "'flex-start'",
          "computed": false
        }
      },
      "lg": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use. It's applied for the lg breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "md": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use. It's applied for the md breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "sm": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use. It's applied for the sm breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "0",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "16",
              "computed": false
            },
            {
              "value": "24",
              "computed": false
            },
            {
              "value": "32",
              "computed": false
            },
            {
              "value": "40",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the space between the type item component. It can only be used on a type container component.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "wrap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'nowrap'",
              "computed": false
            },
            {
              "value": "'wrap'",
              "computed": false
            },
            {
              "value": "'wrap-reverse'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the flex-wrap style property. It's applied for all screen sizes.",
        "defaultValue": {
          "value": "'wrap'",
          "computed": false
        }
      },
      "xl": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use. It's applied for the xl breakpoint and wider screens.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xs": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use. It's applied for all the screen sizes with the lowest priority.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "zeroMinWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, it sets min-width: 0 on the item. Refer to the limitations section of the documentation to better understand the use case.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Icon.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Icon",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The name of the icon font ligature."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'action'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'disabled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      },
      "fontSize": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Link.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Link",
    "methods": [],
    "props": {
      "block": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls whether the link is inline or not. When block is true the link is not inline when block is false it is.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the link."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'textPrimary'",
              "computed": false
            },
            {
              "value": "'textSecondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the link.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'a'",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The url to refer to"
      },
      "TypographyClasses": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "classes property applied to the Typography element."
      },
      "underline": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'none'",
              "computed": false
            },
            {
              "value": "'hover'",
              "computed": false
            },
            {
              "value": "'always'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls when the link should have an underline.",
        "defaultValue": {
          "value": "'hover'",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Applies the theme typography styles.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Paper.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Paper",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Shadow depth, corresponds to dp in the spec. It's accepting values between 0 and 24 inclusive.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "square": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, rounded corners are disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Typography.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Typography",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'justify'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the text-align on the component.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'textPrimary'",
              "computed": false
            },
            {
              "value": "'textSecondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component. By default, it maps the variant to a good default headline component."
      },
      "gutterBottom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the text will have a bottom margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "headlineMapping": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "We are empirically mapping the variant property to a range of different DOM element types. For instance, subtitle1 to <h6>. If you wish to change that mapping, you can provide your own. Alternatively, you can use the component property. The default mapping is the following:",
        "defaultValue": {
          "value": "{ h1: 'h1', h2: 'h2', h3: 'h3', h4: 'h4', h5: 'h5', h6: 'h6', subtitle1: 'h6', subtitle2: 'h6', body1: 'p', body2: 'p' }",
          "computed": false
        }
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls whether the Typography is inline or not.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "internalDeprecatedVariant": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "A deprecated variant is used from an internal component. Users don't need a deprecation warning here if they switched to the v2 theme. They already get the mapping that will be applied in the next major release."
      },
      "noWrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the text will not wrap, but instead will truncate with an ellipsis.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "paragraph": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the text will have a bottom margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'h1'",
              "computed": false
            },
            {
              "value": "'h2'",
              "computed": false
            },
            {
              "value": "'h3'",
              "computed": false
            },
            {
              "value": "'h4'",
              "computed": false
            },
            {
              "value": "'h5'",
              "computed": false
            },
            {
              "value": "'h6'",
              "computed": false
            },
            {
              "value": "'subtitle1'",
              "computed": false
            },
            {
              "value": "'subtitle2'",
              "computed": false
            },
            {
              "value": "'body1'",
              "computed": false
            },
            {
              "value": "'body2'",
              "computed": false
            },
            {
              "value": "'caption'",
              "computed": false
            },
            {
              "value": "'button'",
              "computed": false
            },
            {
              "value": "'overline'",
              "computed": false
            },
            {
              "value": "'srOnly'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "\"display4\"",
              "computed": false
            },
            {
              "value": "'display3'",
              "computed": false
            },
            {
              "value": "'display2'",
              "computed": false
            },
            {
              "value": "'display1'",
              "computed": false
            },
            {
              "value": "'headline'",
              "computed": false
            },
            {
              "value": "'title'",
              "computed": false
            },
            {
              "value": "'subheading'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Applies the theme typography styles. Use body1 as the default value with the legacy implementation and body2 with the new one."
      }
    }
  }
}