{
  "src/lib/components/AppBar.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "AppBar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fixed'",
              "computed": false
            },
            {
              "value": "'absolute'",
              "computed": false
            },
            {
              "value": "'sticky'",
              "computed": false
            },
            {
              "value": "'static'",
              "computed": false
            },
            {
              "value": "'relative'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The positioning type. The behavior of the different options is described in the MDN web docs. Note: sticky is not universally supported and will fall back to static when unavailable.",
        "defaultValue": {
          "value": "'fixed'",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/Avatar.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Avatar",
    "methods": [],
    "props": {
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Used in combination with src or srcSet to provide an alt attribute for the rendered img element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Used to render icon or text elements inside the Avatar. src and alt props will not be used and no img will be rendered by default.\nThis can be an element, or just a string."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "imgProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the img element if the component is used to display an image."
      },
      "sizes": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The sizes attribute for the img element."
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The src attribute for the img element."
      },
      "srcSet": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The srcSet attribute for the img element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/Badge.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Badge",
    "methods": [],
    "props": {
      "badgeContent": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content rendered within the badge."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The badge will be added relative to this node."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "invisible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the badge will be invisible."
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Max count to show.",
        "defaultValue": {
          "value": "99",
          "computed": false
        }
      },
      "showZero": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls whether the badge is hidden when badgeContent is zero.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'dot'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'standard'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Button.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the button."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableFocusRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the keyboard focus ripple will be disabled. disableRipple must also be true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the ripple effect will be disabled."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked. If defined, an a element will be used as the root node."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "mini": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, and variant is 'fab', will use mini floating action button styling.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The size of the button. small is equivalent to the dense button styling.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'text'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'contained'",
              "computed": false
            },
            {
              "value": "'fab'",
              "computed": false
            },
            {
              "value": "'extendedFab'",
              "computed": false
            },
            {
              "value": "'flat'",
              "computed": false
            },
            {
              "value": "'raised'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use. WARNING: flat and raised are deprecated. Instead use text and contained respectively. fab and extendedFab are deprecated. Instead use <Fab> and <Fab variant=\"extended\">",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Card.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Card",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "raised": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the card will use raised styling.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/CardActionArea.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "CardActionArea",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/CardActions.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "CardActions",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "disableActionSpacing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the card actions do not have additional margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/CardContent.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "CardContent",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/CardMedia.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "CardMedia",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "image": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Image to be displayed as a background image. Either image or src prop must be specified. Note that caller must specify height otherwise the image will not be visible."
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "An alias for image property. Available only with media components. Media components: video, audio, picture, iframe, img."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/CircularProgress.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "CircularProgress",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "disableShrink": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the shrink animation is disabled. This only works if variant is indeterminate.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The size of the circle.",
        "defaultValue": {
          "value": "40",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The value of the progress indicator for the determinate and static variants. Value between 0 and 100.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'determinate'",
              "computed": false
            },
            {
              "value": "'indeterminate'",
              "computed": false
            },
            {
              "value": "'static'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use. Use indeterminate when there is no progress value.",
        "defaultValue": {
          "value": "'indeterminate'",
          "computed": false
        }
      },
      "thickness": {
        "defaultValue": {
          "value": "3.6",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/Divider.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "absolute": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Absolutely position the element.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'hr'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "inset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the divider will be indented. WARNING: inset is deprecated. Instead use variant=\"inset\"."
      },
      "light": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the divider will have a lighter color.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fullWidth'",
              "computed": false
            },
            {
              "value": "'inset'",
              "computed": false
            },
            {
              "value": "'middle'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'fullWidth'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Drawer.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Drawer",
    "methods": [],
    "props": {
      "anchor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "ModalProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "PaperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "SlideProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'permanent'",
              "computed": false
            },
            {
              "value": "'persistent'",
              "computed": false
            },
            {
              "value": "'temporary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'temporary'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Grid.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Grid",
    "methods": [],
    "props": {
      "alignContent": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'stretch'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'space-between'",
              "computed": false
            },
            {
              "value": "'space-around'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the align-content style property. It's applied for all screen sizes.",
        "defaultValue": {
          "value": "'stretch'",
          "computed": false
        }
      },
      "alignItems": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'stretch'",
              "computed": false
            },
            {
              "value": "'baseline'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the align-items style property. It's applied for all screen sizes.",
        "defaultValue": {
          "value": "'stretch'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "container": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the component will have the flex container behavior. You should be wrapping items with a container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'row'",
              "computed": false
            },
            {
              "value": "'row-reverse'",
              "computed": false
            },
            {
              "value": "'column'",
              "computed": false
            },
            {
              "value": "'column-reverse'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the flex-direction style property. It is applied for all screen sizes.",
        "defaultValue": {
          "value": "'row'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "item": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the component will have the flex item behavior. You should be wrapping items with a container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "justify": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'space-between'",
              "computed": false
            },
            {
              "value": "'space-around'",
              "computed": false
            },
            {
              "value": "'space-evenly'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the justify-content style property. It is applied for all screen sizes.",
        "defaultValue": {
          "value": "'flex-start'",
          "computed": false
        }
      },
      "lg": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use. It's applied for the lg breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "md": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use. It's applied for the md breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "sm": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use. It's applied for the sm breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "0",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "16",
              "computed": false
            },
            {
              "value": "24",
              "computed": false
            },
            {
              "value": "32",
              "computed": false
            },
            {
              "value": "40",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the space between the type item component. It can only be used on a type container component.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "wrap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'nowrap'",
              "computed": false
            },
            {
              "value": "'wrap'",
              "computed": false
            },
            {
              "value": "'wrap-reverse'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the flex-wrap style property. It's applied for all screen sizes.",
        "defaultValue": {
          "value": "'wrap'",
          "computed": false
        }
      },
      "xl": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use. It's applied for the xl breakpoint and wider screens.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xs": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use. It's applied for all the screen sizes with the lowest priority.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "zeroMinWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, it sets min-width: 0 on the item. Refer to the limitations section of the documentation to better understand the use case.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/GridList.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "GridList",
    "methods": [],
    "props": {
      "cellHeight": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "PropTypes.number",
              "computed": true
            },
            {
              "value": "'auto'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Number of px for one cell height. You can set 'auto' if you want to let the children determine the height.",
        "defaultValue": {
          "value": "180",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "cols": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of columns.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'ul'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "spacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of px for the spacing between tiles.",
        "defaultValue": {
          "value": "4",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/Hidden.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Hidden",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "implementation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'css'",
              "computed": false
            },
            {
              "value": "'js'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify which implementation to use. 'js' is the default, 'css' works better for server-side rendering.",
        "defaultValue": {
          "value": "'js'",
          "computed": false
        }
      },
      "initialWidth": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'xs'",
              "computed": false
            },
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'md'",
              "computed": false
            },
            {
              "value": "'lg'",
              "computed": false
            },
            {
              "value": "'xl'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "You can use this property when choosing the js implementation with server-side rendering.\nAs window.innerWidth is unavailable on the server, we default to rendering an empty component during the first mount. You might want to use an heuristic to approximate the screen width of the client browser screen width.\nFor instance, you could be using the user-agent or the client-hints. https://caniuse.com/#search=client%20hint"
      },
      "lgDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "lgUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "mdDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "mdUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "only": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'xs'",
              "computed": false
            },
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'md'",
              "computed": false
            },
            {
              "value": "'lg'",
              "computed": false
            },
            {
              "value": "'xl'",
              "computed": false
            },
            {
              "value": "PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))",
              "computed": true
            }
          ]
        },
        "required": false,
        "description": "Hide the given breakpoint(s)."
      },
      "smDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "smUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "xlDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xlUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xsDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xsUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Icon.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Icon",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The name of the icon font ligature."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'action'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'disabled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      },
      "fontSize": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/IconButton.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "IconButton",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the button will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the ripple will be disabled."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/Link.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Link",
    "methods": [],
    "props": {
      "block": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls whether the link is inline or not. When block is true the link is not inline when block is false it is.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the link."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'textPrimary'",
              "computed": false
            },
            {
              "value": "'textSecondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the link.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'a'",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The url to refer to"
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "TypographyClasses": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "classes property applied to the Typography element."
      },
      "underline": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'none'",
              "computed": false
            },
            {
              "value": "'hover'",
              "computed": false
            },
            {
              "value": "'always'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls when the link should have an underline.",
        "defaultValue": {
          "value": "'hover'",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Applies the theme typography styles.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/List.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "List",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'ul'",
          "computed": false
        }
      },
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, compact vertical padding designed for keyboard and mouse input will be used for the list and list items. The property is available to descendant components as the dense context.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disablePadding": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, vertical padding will be removed from the list.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "subheader": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the subheader, normally ListSubheader."
      }
    }
  },
  "src/lib/components/ListItem.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "ListItem",
    "methods": [],
    "props": {
      "alignItems": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the align-items style property.",
        "defaultValue": {
          "value": "'center'",
          "computed": false
        }
      },
      "button": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the list item will be a button (using ButtonBase).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component. If a ListItemSecondaryAction is used it must be the last child."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component. By default, it's a li when button is false and a div when button is true."
      },
      "ContainerComponent": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The container component used when a ListItemSecondaryAction is the last child.",
        "defaultValue": {
          "value": "'li'",
          "computed": false
        }
      },
      "ContainerProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the container component if used."
      },
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, compact vertical padding designed for keyboard and mouse input will be used.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the list item will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the left and right padding is removed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "divider": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, a 1px light border is added to the bottom of the list item.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use to apply selected styling.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/ListItemAvatar.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "ListItemAvatar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "The content of the component \u2013 normally Avatar."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/ListItemIcon.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "ListItemIcon",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "The content of the component \u2013 normally Icon."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/ListItemText.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "ListItemText",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Alias for the primary property."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "disableTypography": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the children won't be wrapped by a Typography component. This can be useful to render an alternative Typography variant by wrapping the children (or primary) text, and optional secondary text with the Typography component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "inset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the children will be indented. This should be used if there is no left avatar or left icon.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "primary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The main content element."
      },
      "primaryTypographyProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "These props will be forwarded to the primary typography component (as long as disableTypography is not true)."
      },
      "secondary": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The secondary content element."
      },
      "secondaryTypographyProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "These props will be forwarded to the secondary typography component (as long as disableTypography is not true)."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/Paper.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Paper",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Shadow depth, corresponds to dp in the spec. It's accepting values between 0 and 24 inclusive.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "square": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, rounded corners are disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/Table.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Table",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the table, normally TableHead and TableBody."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'table'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "padding": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'checkbox'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Allows TableCells to inherit padding of the Table.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/TableBody.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "TableBody",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the table, normally TableHead and TableBody."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'tbody'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "padding": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'checkbox'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Allows TableCells to inherit padding of the Table.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/TableCell.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is ediTableCell by the user.",
    "displayName": "TableCell",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'justify'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the text-align on the table cell content. Monetary or generally number fields should be right aligned as that allows you to add them up quickly in your head without having to worry about decimals.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The table cell contents."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "padding": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'checkbox'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets the padding applied to the cell. By default, the Table parent component set the value."
      },
      "scope": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set scope attribute."
      },
      "sortDirection": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'asc'",
              "computed": false
            },
            {
              "value": "'desc'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set aria-sort direction."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "varaint": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'head'",
              "computed": false
            },
            {
              "value": "'body'",
              "computed": false
            },
            {
              "value": "'footer'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the cell type. By default, the TableHead, TableBody or TableFooter parent component set the value."
      }
    }
  },
  "src/lib/components/TableFooter.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is ediTableFooter by the user.",
    "displayName": "TableFooter",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component, normally TableRow."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'tfoot'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/TableHead.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is ediTableHead by the user.",
    "displayName": "TableHead",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component, normally TableRow."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'thead'",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "padding": {
        "defaultValue": {
          "value": "'default'",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/TableRow.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is ediTableRow by the user.",
    "displayName": "TableRow",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Should be valid <tr> children such as TableCell."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'tr'",
          "computed": false
        }
      },
      "hover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the table row will shade on hover.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the table row will have the selected shading.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      }
    }
  },
  "src/lib/components/Toolbar.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is ediToolbar by the user.",
    "displayName": "Toolbar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Toolbar children, usually a mixture of IconButton, Button and Typography."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "disableGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, disables gutter padding.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'regular'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'regular'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Typography.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "Typography",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'justify'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the text-align on the component.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component. See CSS API below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'textPrimary'",
              "computed": false
            },
            {
              "value": "'textSecondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.Component"
        },
        "required": false,
        "description": "The component used for the root node. Either a string to use a DOM element or a component. By default, it maps the variant to a good default headline component."
      },
      "gutterBottom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the text will have a bottom margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "headlineMapping": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "We are empirically mapping the variant property to a range of different DOM element types. For instance, subtitle1 to <h6>. If you wish to change that mapping, you can provide your own. Alternatively, you can use the component property. The default mapping is the following:",
        "defaultValue": {
          "value": "{ h1: 'h1', h2: 'h2', h3: 'h3', h4: 'h4', h5: 'h5', h6: 'h6', subtitle1: 'h6', subtitle2: 'h6', body1: 'p', body2: 'p' }",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The components id"
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls whether the Typography is inline or not.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "internalDeprecatedVariant": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "A deprecated variant is used from an internal component. Users don't need a deprecation warning here if they switched to the v2 theme. They already get the mapping that will be applied in the next major release."
      },
      "noWrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the text will not wrap, but instead will truncate with an ellipsis.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "paragraph": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the text will have a bottom margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Add style object"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'h1'",
              "computed": false
            },
            {
              "value": "'h2'",
              "computed": false
            },
            {
              "value": "'h3'",
              "computed": false
            },
            {
              "value": "'h4'",
              "computed": false
            },
            {
              "value": "'h5'",
              "computed": false
            },
            {
              "value": "'h6'",
              "computed": false
            },
            {
              "value": "'subtitle1'",
              "computed": false
            },
            {
              "value": "'subtitle2'",
              "computed": false
            },
            {
              "value": "'body1'",
              "computed": false
            },
            {
              "value": "'body2'",
              "computed": false
            },
            {
              "value": "'caption'",
              "computed": false
            },
            {
              "value": "'button'",
              "computed": false
            },
            {
              "value": "'overline'",
              "computed": false
            },
            {
              "value": "'srOnly'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "\"display4\"",
              "computed": false
            },
            {
              "value": "'display3'",
              "computed": false
            },
            {
              "value": "'display2'",
              "computed": false
            },
            {
              "value": "'display1'",
              "computed": false
            },
            {
              "value": "'headline'",
              "computed": false
            },
            {
              "value": "'title'",
              "computed": false
            },
            {
              "value": "'subheading'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Applies the theme typography styles. Use body1 as the default value with the legacy implementation and body2 with the new one."
      }
    }
  }
}